---
title: "STAT 417 - Final Project"
author: "Nils Berzins"
format: pdf
editor: visual
---

```{r library_dependencies}
#| warning: false

library(tidyverse)
library(readxl)
library(quadprog)
library(pracma)
library(ggplot2)
library(ggthemes)
library(tseries)
library(zoo)
library(forecast)
library(fitHeavyTail)
library(reshape2)
```

```{r tbill_returns}
tbill <- read_excel("DGS6MO.xlsx") |>
  na.omit() |>
  mutate(Yield = Yield / 100)
```

```{r HW1_files}
#| warning: false
library(tidyverse)
folder_path <- paste(file.path(getwd(),"Homework Assignments/", "HW 1 Files"))

all_files <- list.files(folder_path)

filtered_files <- all_files[!grepl("-", all_files)]
filtered_files <- all_files[-1]

datasets <- lapply(filtered_files, function(x) {
  curr_data <- read.table(paste0(folder_path, "/", x), sep=",", h = 1)
  curr_data$Date <- as.Date(curr_data$Date, "%m/%d/%Y")
  curr_data <- curr_data[order(curr_data$Date),]
  curr_data$Close.Last <- as.numeric(gsub("\\$", "", curr_data$Close.Last))
  price <- curr_data$Close.Last
  names(price) <- curr_data$Date
  return(price)
})

file_names <- gsub("\\.csv$", "", filtered_files)
names(datasets) <- file_names
```

```{r HW2_files}

folder_path <- paste(file.path(getwd(), "Homework Assignments/", "HW 2 Files"))

all_files <- list.files(folder_path)

filtered_files <- all_files[!grepl("-", all_files)]
filtered_files <- all_files[-1]

datasets2 <- lapply(filtered_files, function(x) {
  curr_data <- read.table(paste0(folder_path, "/", x), sep=",", h = 1)
  curr_data$Date <- as.Date(curr_data$Date, "%m/%d/%Y")
  curr_data <- curr_data[order(curr_data$Date),]
  curr_data$Close.Last <- as.numeric(gsub("\\$", "", curr_data$Close.Last))
  price <- curr_data$Close.Last
  names(price) <- curr_data$Date
  return(price)
})

file_names <- gsub("\\.csv$", "", filtered_files)
names(datasets2) <- file_names
```

```{r Daily_Returns}
# Compute daily returns correctly
daily_ret1 <- lapply(datasets, function(x) {
  return(diff(x) / head(x, -1))
})

daily_ret2 <- lapply(datasets2, function(x) {
  return(diff(x) / head(x, -1))
})

# Combined Daily Returns
daily_ret <- c(daily_ret1, daily_ret2)
```

## Problem 1

### A)

```{r tbill_dates}
date_grab <- as.Date(names(daily_ret[[1]]))

unique_years <- unique(format(date_grab, "%Y"))

mid_year_dates <- as.Date(paste(unique_years, "-06-30", sep = ""))
end_year_dates <- as.Date(paste(unique_years, "-12-31", sep = ""))

split_dates <- sort(c(mid_year_dates, end_year_dates))
split_dates <- split_dates[1:20]

bond_dates <- as.Date(c("2015-06-30", "2015-12-31", "2016-06-30", "2016-12-30", "2017-06-30", "2017-12-29", "2018-06-29", "2018-12-31", "2019-06-28", "2019-12-31", "2020-06-30", "2020-12-31", "2021-06-30", "2021-12-31", "2022-06-30", "2022-12-30", "2023-06-30", "2023-12-29", "2024-06-28", "2024-12-31"))

rf_tbill_sem <- tbill[tbill$Date %in% bond_dates, ]
```

**CHUNK HAS BEEN CACHED**

```{r Creating_Semesters, cache=TRUE}

# Remove Starbucks & etfs for this parts calculations
daily_ret_tb <- daily_ret[setdiff(names(daily_ret), c("SPY", "QQQ", "DIA"))]

daily_ret_etf <- daily_ret[intersect(names(daily_ret), c("SPY"))]

# Create retrieval function for each stock in each semester
retrieve_sem <- function(returns, start, end) {
  sem_returns <- returns[as.Date(names(returns)) > start & as.Date(names(returns)) <= end]
  dates <- names(returns[as.Date(names(returns)) > start & as.Date(names(returns)) <= end])

  names(sem_returns) <- dates
  
  return(sem_returns)
}

# Create a higher level list that splits everything up into the semesters
semesters <- list()

semesters_etf <- list()

for(i in 2:length(split_dates)) {
   
  temp_sem <- list(lapply(daily_ret_tb, 
                          retrieve_sem, 
                          split_dates[i-1], 
                          split_dates[i]))
  
  temp_sem_etf <- lapply(daily_ret_etf, 
                          retrieve_sem, 
                          split_dates[i-1], 
                          split_dates[i])
  
  # Setting name of temp_sem to semester end date 
  # E.g. 2016-01-01 --> 2016-06-30 called 2016-06-30
  temp_sem <- setNames(temp_sem, as.character(split_dates[i]))
  
  temp_sem_etf <- setNames(temp_sem_etf, as.character(split_dates[i]))
  
  semesters <- c(semesters, temp_sem)
  
  semesters_etf <- c(semesters_etf, temp_sem_etf)
}
```

```{r}
create_weights <- function(nassets, temp_mean, cov_mat) {

  
  # Constraints for the quadratic problem of portfolio construction
  Amat = cbind(rep(1, nassets), temp_mean, diag(1, nrow = nassets))
  
  min_mu <- min(temp_mean)
  max_mu <- max(temp_mean)
  
  muP <- seq(min_mu, max_mu, length.out = 10) # MUST CHANGE TO MIN/MAX OF LOGMEANS
  
  # Ensure correct dimensions for storage
  weights <- matrix(NA, nrow = length(muP), ncol = nassets)  # Use NA instead of 0
  sdP <- rep(NA, length(muP))  # Initialize sdP with NA
  
  # Find the optimal portfolios
  for (i in 1:length(muP)) {
    bvec <- c(1, muP[i], rep(0, nassets))  # Constraint vector
    
    result <- tryCatch(
      solve.QP(Dmat = 2 * cov_mat, 
               dvec = rep(0, nassets),
               Amat = Amat, 
               bvec = bvec, 
               meq = 2),
      error = function(e) {
        warning(paste("Optimization failed at muP =", muP[i]))
        return(NULL)  # Return NULL on failure
      }
    )
    
    # Store results if optimization was successful
    if (!is.null(result) && !is.null(result$solution) && length(result$solution) == nassets) {
      sdP[i] <- sqrt(result$value)
      weights[i, ] <- result$solution
    }
  }
  
  # Convert matrix to data frame and clean up values
  colnames(weights) <- names(temp_mean)
  df_temp <- as.data.frame(weights)
  df_temp[abs(df_temp) < 1e-10] <- 0  # Remove near-zero values
  
  # Assign row names as annualized expected returns
  rownames(df_temp) <- round(exp(muP) - 1, digits = 3)
  
  weights_mat <- as.matrix(df_temp)
  
  return(list(sdP = sdP, muP = muP, weights = weights_mat))
}
```

```{r}
create_portfolios <- function(sdP, muP, weights, rf_rate, target) {
  
  # Input value of risk-free interest rate
  mufree <- rf_rate 

  # Compute Sharpe ratios
  sharpe <- (muP - mufree) / sdP
  
  # Find tangency portfolio (max Sharpe ratio)
  ind <- (sharpe == max(sharpe, na.rm = TRUE)) 
  tan_sharpe <- sharpe[ind]
  tangency_port <- weights[ind, , drop = FALSE]

  # Find minimum variance portfolio (min std deviation)
  ind2 <- (sdP == min(sdP, na.rm = TRUE)) 
  min_sharpe <- sharpe[ind2]
  min_var_port <- weights[ind2, , drop = FALSE]

  # Find target return portfolio
  ind3 <- which.min(abs(muP - target))
  target_sharpe <- sharpe[ind3]
  target_port <- weights[ind3, , drop = FALSE]

  # Ensure at least one row remains (replace empty matrices with NA row)
  if (is.null(nrow(tangency_port))) {
    tangency_port <- matrix(NA, nrow = 1, ncol = ncol(weights))
    colnames(tangency_port) <- colnames(weights)
  }
  
  if (is.null(nrow(min_var_port))) {
    min_var_port <- matrix(NA, nrow = 1, ncol = ncol(weights))
    colnames(min_var_port) <- colnames(weights)
  }
  
  if (is.null(nrow(target_port))) {
    target_port <- matrix(NA, nrow = 1, ncol = ncol(weights))
    colnames(target_port) <- colnames(weights)
  }

  # Initialize Sharpe ratios as NA for all categories
  sharpe_ratios <- c(tangency = NA, min_var = NA, target = NA)

  # Replace with valid Sharpe ratios if available
  if (any(!is.na(tan_sharpe))) sharpe_ratios["tangency"] <- tan_sharpe[1]
  if (any(!is.na(min_sharpe))) sharpe_ratios["min_var"] <- min_sharpe[1]
  if (any(!is.na(target_sharpe))) sharpe_ratios["target"] <- target_sharpe[1]

  # Store results properly
  portfolio_info <- list(
    sharpe_ratios = sharpe_ratios,
    portfolios = list(
      tangency = tangency_port[1, ],
      min_variance = min_var_port[1, ],
      target = target_port[1, ]
    )
  )

  return(portfolio_info) 
}
```

```{r semester_portfolios_loop}
#| warning: false

portfolio_list <- list(Tangency = data.frame(),
                       Minimum_Variance = data.frame(),
                       Target = data.frame())

sharpe_df <- data.frame(Semester = character(),
                        Tangency = numeric(),
                        Minimum_Variance = numeric(),
                        Target = numeric())


for(i in 1:length(semesters)) {
  
  # retrieve semester
  temp_sem_mat <- do.call(cbind, semesters[[i]])
  
  # turn into daily log returns & necessary log return values
  log_temp_sem_mat <- log(1 + temp_sem_mat)
  log_temp_sem_mean <- colMeans(log_temp_sem_mat) * 126
  cov_mat <- cov(log_temp_sem_mat) * 126
  
  # number of assets used for portfolio calculation - functionally: changes for moderna ipo
  nassets <- nrow(cov_mat)
  
  weights_data <- create_weights(nassets, log_temp_sem_mean, cov_mat)
  
  portfolios_data <- create_portfolios(weights_data$sdP, 
                                       weights_data$muP, 
                                       weights_data$weights, 
                                       rf_tbill_sem[i,]$Yield, 
                                       log(1+(.085 / 2)))
  
  new_sharpe <- data.frame(Semester = names(semesters[i]),
                           Tangency = portfolios_data$sharpe_ratios[1],
                           Minimum_Variance = portfolios_data$sharpe_ratios[2],
                           Target = portfolios_data$sharpe_ratios[3])
  
  sharpe_df <- rbind(sharpe_df, new_sharpe)
  rownames(sharpe_df) <- NULL
  
  semester_name <- names(semesters[i])
  
  tangency_df <- as.data.frame(t(portfolios_data$portfolios$tangency))
  min_var_df <- as.data.frame(t(portfolios_data$portfolios$min_variance))
  target_df <- as.data.frame(t(portfolios_data$portfolios$target))
  
  # Catching incorrect number of columns error with the exclusion of moderna for sems 1-6
  if(i <= 6) {
    tangency_df <- tangency_df |>
    mutate(Moderna = 0) |>
    relocate(Moderna, .before = Netflix)
    
    min_var_df <- min_var_df |>
    mutate(Moderna = 0) |>
    relocate(Moderna, .before = Netflix)
    
    target_df <- target_df |>
    mutate(Moderna = 0) |>
    relocate(Moderna, .before = Netflix)
  }
  
  # Assign row name as the semester name
  rownames(tangency_df) <- semester_name
  rownames(min_var_df) <- semester_name
  rownames(target_df) <- semester_name
  
  # Append row to the corresponding data frame in the list
  portfolio_list$Tangency <- rbind(portfolio_list$Tangency, tangency_df)
  portfolio_list$Minimum_Variance <- rbind(portfolio_list$Minimum_Variance, min_var_df)
  portfolio_list$Target <- rbind(portfolio_list$Target, target_df)

  }
```

```{r Plot_Sharpe}

sharpe_df_prep <- sharpe_df |>
  mutate(Semester = as.Date(str_sub(Semester, 1, -4), format = "%Y-%M"),
         index = row_number()) |>
  mutate_all(~ replace(., is.na(.), 0))

sharpe_df_long <- sharpe_df_prep |>
  pivot_longer(cols = c(Tangency, Minimum_Variance, Target),
               names_to = "Type",
               values_to = "Sharpe")

sharpe_df_long |>
  ggplot(aes(x = index, y = Sharpe, color = Type)) +
  geom_point() +
  geom_line() +
  theme_economist() +
  labs(title = "Sharpe Ratios of Portfolios Over Time", x = "Semesters Since 2015-06", y = "Sharpe")
```

```{r Plot_TB_Weights}

# Define tech and banking stocks
tech_stocks <- c("Amazon", "Apple", "Cisco", "Meta", "Microsoft", "Moderna", "Netflix", "Tesla")
bank_stocks <- c("BAC", "C", "GS", "MS", "WFC")

# Function to compute aggregated weights for tech and banking stocks
aggregate_weights <- function(df) {
  df$Tech_Weight <- rowSums(df[, colnames(df) %in% tech_stocks, drop = FALSE], na.rm = TRUE)
  df$Bank_Weight <- rowSums(df[, colnames(df) %in% bank_stocks, drop = FALSE], na.rm = TRUE)
  df$Index <- seq_len(nrow(df))
  return(df[, c("Index", "Tech_Weight", "Bank_Weight")])
}

# Apply function to each portfolio in the list
aggregated_results <- lapply(portfolio_list, aggregate_weights)

# Naming the list elements
names(aggregated_results) <- c("Tangency", "Minimum_Variance", "Target")


plot_weights <- function(df, port_name) {
  
  temp_long <- df |>
  pivot_longer(cols = c(Tech_Weight, Bank_Weight),
               names_to = "Type",
               values_to = "Weights")
  temp_long |>
  ggplot(aes(x = Index, y = Weights, color = Type)) +
  geom_point() +
  geom_line() +
  theme_economist() +
  labs(title = port_name, x = "Semesters Since 2015-06", y = "Weight")
  
}

plots <- mapply(plot_weights, aggregated_results, names(aggregated_results), SIMPLIFY = FALSE)

plots

```

### B)

```{r}
#Get spy semester returns and risk premium

spy_sem <- sapply(semesters_etf, function(x) {
  yeild <- log(1 + mean(x)) * 126
})

spy_rp_df <- data.frame(SPY_Sem_Returns = unlist(spy_sem))

spy_rp_df <- spy_rp_df |>
  mutate(SPY_Risk_Prem = SPY_Sem_Returns - rf_tbill_sem$Yield[2:20])
```

```{r}
#Get semester returns for each stock

semester_returns <- lapply(semesters, function(sem) {
  
  stock_sem <- lapply(sem, function(x) {
    
    stock_return <- log(1 + mean(x)) * 126
    
    if (is.nan(stock_return)) {
      stock_return <- 0
    }
    return(stock_return)
  })
  
  return(stock_sem)
})

portfolio_list <- lapply(portfolio_list, function(portfolio) {
  portfolio[is.na(portfolio)] <- 0
  return(portfolio)
})
```

```{r}
portfolio_returns <- list(tangency = numeric(19), minimum_variance = numeric(19), target = numeric(19))

for (i in 1:19) {
  # Tangency Portfolio
  portfolio_returns$tangency[i] <- sum(portfolio_list$Tangency[i,] * unlist(semester_returns[[i]]))
  
  # Minimum Variance Portfolio
  portfolio_returns$minimum_variance[i] <- sum(portfolio_list$Minimum_Variance[i,] * unlist(semester_returns[[i]]))
  
  # Target Portfolio
  portfolio_returns$target[i] <- sum(portfolio_list$Target[i,] * unlist(semester_returns[[i]]))
}
```

```{r}
portfolio_risk_premium <- list(tangency = numeric(19), minimum_variance = numeric(19), target = numeric(19))

for(i in 1:19) {
  
  portfolio_risk_premium$tangency[i] <- portfolio_returns[[1]][i] - rf_tbill_sem$Yield[i+1]
  portfolio_risk_premium$minimum_variance[i] <- portfolio_returns[[2]][i] - rf_tbill_sem$Yield[i+1]
  portfolio_risk_premium$target[i] <- portfolio_returns[[3]][i] - rf_tbill_sem$Yield[i+1]
}

portfolio_risk_premium
```


```{r}
lm_tan <- lm(portfolio_risk_premium$tangency ~ spy_rp_df$SPY_Risk_Prem)

lm_min_var <- lm(portfolio_risk_premium$minimum_variance ~ spy_rp_df$SPY_Risk_Prem)

lm_tar <- lm(portfolio_risk_premium$target ~ spy_rp_df$SPY_Risk_Prem)
```


```{r}
beta_tan <- coef(lm_tan)[2]
beta_min_var <- coef(lm_min_var)[2]
beta_tar <- coef(lm_tar)[2]
```

```{r}
capm_expected_tan <- rf_tbill_sem$Yield[2:20] + beta_tan * spy_rp_df$SPY_Risk_Prem
capm_expected_min_var <- rf_tbill_sem$Yield[2:20] + beta_min_var * spy_rp_df$SPY_Risk_Prem
capm_expected_tar <- rf_tbill_sem$Yield[2:20] + beta_tar * spy_rp_df$SPY_Risk_Prem
```

```{r}
mispricing_tan <- portfolio_risk_premium$tangency - capm_expected_tan
mispricing_min_var <- portfolio_risk_premium$minimum_variance - capm_expected_min_var
mispricing_tar <- portfolio_risk_premium$target - capm_expected_tar
```

```{r}
result_df <- data.frame(
  Semester = 1:19,
  Actual_Tan = portfolio_risk_premium$tangency,
  Mispricing_Tan = mispricing_tan,
  
  Actual_Min_Var = portfolio_risk_premium$minimum_variance,
  Mispricing_Min_Var = mispricing_min_var,

  Actual_Tar = portfolio_risk_premium$target,
  Mispricing_Tar = mispricing_tar
)

print(result_df)
```

## Problem 2
### A)
```{r}
# Function to compute log monthly returns for a given end date
compute_log_monthly_returns_dynamic <- function(stock_returns, end_date) {
  
  # Convert names to Date format
  dates <- as.Date(names(stock_returns))
  
  # Filter stock returns up to the specified end_date
  valid_idx <- dates < as.Date(end_date)
  stock_returns <- stock_returns[valid_idx]
  dates <- dates[valid_idx]
  
  # Extract "YYYY-MM" for monthly grouping
  months <- format(dates, "%Y-%m")  

  # Compute the mean daily return per month
  mean_daily_return <- tapply(stock_returns, months, mean, na.rm = TRUE)
  
  # Convert to log monthly returns: log(1 + mean_return * 21)
  log_monthly_returns <- log(1 + mean_daily_return * 21)

  # Named numeric vector (YYYY-MM as names)
  return(log_monthly_returns)
}

end_dates <- seq(as.Date("2023-12-01"), by = "1 month", length.out = 13)

# Apply function to each stock in daily_ret_tb for each end date
monthly_ret_list_max <- lapply(end_dates, function(end_date) {
  lapply(daily_ret_tb, compute_log_monthly_returns_dynamic, end_date = end_date)
})

# Naming each iteration for clarity
names(monthly_ret_list_max) <- format(end_dates, "%Y-%m")

```

```{r}
# Function to compute log monthly returns (excluding 2024+)
compute_log_monthly_returns <- function(stock_returns) {
  
  # Convert names to Date format
  dates <- as.Date(names(stock_returns))
  
  # Exclude data beyond Dec 2023
  valid_idx <- dates < as.Date("2024-01-01")
  
  # Filter stock returns and corresponding dates
  stock_returns <- stock_returns[valid_idx]
  dates <- dates[valid_idx]
  
  # Extract "YYYY-MM" for monthly grouping
  months <- format(dates, "%Y-%m")  

  # Compute the mean daily return per month
  mean_daily_return <- tapply(stock_returns, months, mean, na.rm = TRUE)
  
  # Convert to log monthly returns: log(1 + mean_return * 21)
  log_monthly_returns <- log(1 + mean_daily_return * 21)

  # Named numeric vector (YYYY-MM as names)
  return(log_monthly_returns)
}

# Apply function to each stock in daily_ret_tb
monthly_ret_tb <- lapply(daily_ret_tb, compute_log_monthly_returns)
```


```{r hist_risk_cov}
# Get the historical average risk
  # Get data from Jan 15 to Dec 23 and just take the risk of all of that

all_months <- unique(unlist(lapply(monthly_ret_tb, names)))

monthly_ret_matrix <- data.frame(matrix(NA, nrow = length(all_months), ncol = length(monthly_ret_tb)))
colnames(monthly_ret_matrix) <- names(monthly_ret_tb)  # Set column names as stock names
rownames(monthly_ret_matrix) <- all_months  # Set row names as months

for (stock in names(monthly_ret_tb)) {
  stock_data <- monthly_ret_tb[[stock]]
  monthly_ret_matrix[names(stock_data), stock] <- stock_data  # Align values with corresponding months
}

monthly_ret_matrix <- as.matrix(monthly_ret_matrix)

cov_matrix <- cov(monthly_ret_matrix, use = "pairwise.complete.obs") #pairwise.complete.obs to handle NAs in moderna stock
```

```{r predict_ar1}
#| warning: false

monthly_ret_list <- monthly_ret_list_max[2:13]

predict_arima_month <- function(stock_monthly) {

  stock_monthly_ts <- ts(stock_monthly, frequency = 12)

  arma_model <- auto.arima(stock_monthly_ts)

  forecasted_month <- forecast(arma_model, h = 1)

  return(forecasted_month$mean[1])
}

# Apply ARIMA model to all stocks' daily returns
predicted_log_returns_2024 <- lapply(monthly_ret_list, function(pred_month) {
  lapply(pred_month, predict_arima_month)
})

```

```{r tbill_monthly} 
bond_dates_monthly <- c("2024-01-31", "2024-02-29", "2024-03-28", "2024-04-30", "2024-05-31", "2024-06-28", 
                        "2024-07-31", "2024-08-30", "2024-09-30", "2024-10-31", "2024-11-29", "2024-12-31")

tbill_monthly <- tbill[tbill$Date %in% bond_dates_monthly, ,drop = FALSE]  # Ensures output is still a dataframe
```

```{r monthly_portfolio_loop}

monthly_portfolio_list <- list(Tangency = data.frame(),
                       Minimum_Variance = data.frame(),
                       Target = data.frame())

monthly_sharpe_df <- data.frame(Semester = character(),
                        Tangency = numeric(),
                        Minimum_Variance = numeric(),
                        Target = numeric())

for(i in 1:length(predicted_log_returns_2024)) {
  
  temp_month_mat <- do.call(cbind, predicted_log_returns_2024[[i]])

  # number of assets used for portfolio calculation - functionally: changes for moderna ipo
  nassets <- nrow(cov_matrix)
  
  weights_data <- create_weights(nassets, unlist(predicted_log_returns_2024[[i]]), cov_matrix)
  
  portfolios_data <- create_portfolios(weights_data$sdP, 
                                       weights_data$muP, 
                                       weights_data$weights, 
                                       log(1 + tbill_monthly$Yield[i]), 
                                       log(1 + (.085 / 12)))
  
  # portfolios_data$sharpe_ratios[is.na(portfolios_data$sharpe_ratios)] <- 0

  new_sharpe <- data.frame(month = names(predicted_log_returns_2024[i]),
                           Tangency = portfolios_data$sharpe_ratios[1],
                           Minimum_Variance = portfolios_data$sharpe_ratios[2],
                           Target = portfolios_data$sharpe_ratios[3])
  
  # new_sharpe[is.na(new_sharpe)] <- 0
  
  
  monthly_sharpe_df <- rbind(monthly_sharpe_df, new_sharpe)
  rownames(monthly_sharpe_df) <- NULL
  
  month_name <- names(predicted_log_returns_2024)
  
  tangency_df <- as.data.frame(t(portfolios_data$portfolios$tangency))
  min_var_df <- as.data.frame(t(portfolios_data$portfolios$min_variance))
  target_df <- as.data.frame(t(portfolios_data$portfolios$target))
  
  # Assign row name as the month name
  rownames(tangency_df) <- month_name[i]
  rownames(min_var_df) <- month_name[i]
  rownames(target_df) <- month_name[i]

  
  # Append row to the corresponding data frame in the list
  monthly_portfolio_list$Tangency <- rbind(monthly_portfolio_list$Tangency, tangency_df)
  monthly_portfolio_list$Minimum_Variance <- rbind(monthly_portfolio_list$Minimum_Variance, min_var_df)
  monthly_portfolio_list$Target <- rbind(monthly_portfolio_list$Target, target_df)
  
  # Ensure no NA values in any portfolio dataframe
  monthly_portfolio_list$Tangency[is.na(monthly_portfolio_list$Tangency)] <- 0
  monthly_portfolio_list$Minimum_Variance[is.na(monthly_portfolio_list$Minimum_Variance)] <- 0
  monthly_portfolio_list$Target[is.na(monthly_portfolio_list$Target)] <- 0
}
```

```{r}

monthly_sharpe_df[is.na(monthly_sharpe_df)] <- 0

monthly_sharpe_df <- monthly_sharpe_df |>
  mutate(index = row_number())

sharpe_df_long <- monthly_sharpe_df |>
  pivot_longer(cols = c(Tangency, Minimum_Variance, Target),
               names_to = "Type",
               values_to = "Sharpe")

sharpe_df_long |>
  ggplot(aes(x = index, y = Sharpe, color = Type)) +
  geom_point() +
  geom_line() +
  theme_economist() +
  labs(title = "Sharpe Ratios of Portfolios Over Time", x = "Month", y = "Sharpe")
```


```{r}
# Define tech and banking stocks
tech_stocks <- c("Amazon", "Apple", "Cisco", "Meta", "Microsoft", "Moderna", "Netflix", "Tesla")
bank_stocks <- c("BAC", "C", "GS", "MS", "WFC")

aggregate_weights <- function(df) {
  df$Tech_Weight <- rowSums(df[, colnames(df) %in% tech_stocks, drop = FALSE], na.rm = TRUE)
  df$Bank_Weight <- rowSums(df[, colnames(df) %in% bank_stocks, drop = FALSE], na.rm = TRUE)
  df$Index <- seq_len(nrow(df))
  return(df[, c("Index", "Tech_Weight", "Bank_Weight")])
}

# Apply function to each portfolio in the list
aggregated_results <- lapply(monthly_portfolio_list, aggregate_weights)

# Naming the list elements
names(aggregated_results) <- c("Tangency", "Minimum_Variance", "Target")


plot_weights <- function(df, port_name) {
  
  temp_long <- df |>
  pivot_longer(cols = c(Tech_Weight, Bank_Weight),
               names_to = "Type",
               values_to = "Weights")
  temp_long |>
  ggplot(aes(x = Index, y = Weights, color = Type)) +
  geom_point() +
  geom_line() +
  theme_economist() +
  labs(title = port_name, x = "Month", y = "Weight")
  
}

plots <- mapply(plot_weights, aggregated_results, names(aggregated_results), SIMPLIFY = FALSE)

plots
```

### B)

```{r}
monthly_returns_matrix <- as.data.frame(t(monthly_ret_matrix))

monthly_returns_matrix[is.na(monthly_returns_matrix)] <- 0
```

```{r}
naive_return_preds <- list()

for (i in 2:13) {
  prev_month <- names(monthly_ret_list_max)[i - 1]
  naive_pred <- sapply(monthly_ret_list_max[[i - 1]], function(x) tail(x, 1)) 
  naive_return_preds[[names(monthly_ret_list_max)[i]]] <- naive_pred
}
```

```{r}
naive_portfolio_list <- list(Tangency = data.frame(),
                             Minimum_Variance = data.frame(),
                             Target = data.frame())

portfolio_value_naive <- data.frame(Month = character(), 
                                    Tangency = numeric(), 
                                    Minimum_Variance = numeric(), 
                                    Target = numeric(),
                                    stringsAsFactors = FALSE)

initial_investment <- 100e6
portfolio_values <- c(Tangency = initial_investment, 
                      Minimum_Variance = initial_investment, 
                      Target = initial_investment)

for(i in 1:length(naive_return_preds)) {
  month <- names(naive_return_preds)[i]
  pred_mu <- naive_return_preds[[month]]
  
  weights_data <- create_weights(length(pred_mu), pred_mu, cov_matrix)
  
  portfolios <- create_portfolios(weights_data$sdP, 
                                  weights_data$muP, 
                                  weights_data$weights, 
                                  log(1 + tbill_monthly$Yield[i]), 
                                  log(1 + (.085 / 12)))
  
  # Store weights
  month_weights <- list(
    Tangency = as.numeric(portfolios$portfolios$tangency),
    Minimum_Variance = as.numeric(portfolios$portfolios$min_variance),
    Target = as.numeric(portfolios$portfolios$target)
  )
  
  # Calculate actual return for this month from realized returns
  actual_returns <- sapply(monthly_ret_list_max[[i + 1]], function(x) tail(x, 1))
  
  for (ptype in names(portfolio_values)) {
    port_weights <- month_weights[[ptype]]
    names(port_weights) <- names(actual_returns)
    
    aligned_returns <- actual_returns[names(port_weights)]
    port_return <- sum(port_weights * aligned_returns, na.rm = TRUE)
    
    portfolio_values[ptype] <- portfolio_values[ptype] * exp(port_return)
  }
  
  portfolio_value_naive <- rbind(portfolio_value_naive, data.frame(
    Month = month,
    Tangency = portfolio_values["Tangency"],
    Minimum_Variance = portfolio_values["Minimum_Variance"],
    Target = portfolio_values["Target"]
  ))
}
```

```{r}
# Initialize
portfolio_value_arima <- data.frame(Month = character(), 
                                    Tangency = numeric(), 
                                    Minimum_Variance = numeric(), 
                                    Target = numeric(),
                                    stringsAsFactors = FALSE)

portfolio_values <- c(Tangency = 100e6, 
                      Minimum_Variance = 100e6, 
                      Target = 100e6)

# Loop through months Jan to Dec 2024
month_names <- rownames(monthly_portfolio_list$Tangency)

for (i in 1:length(month_names)) {
  month <- month_names[i]
  
  realized_returns <- sapply(monthly_ret_list_max[[i + 1]], function(x) tail(x, 1))
  
  for (ptype in names(portfolio_values)) {
    weights <- as.numeric(monthly_portfolio_list[[ptype]][month, ])
    names(weights) <- names(realized_returns)
    
    aligned_returns <- realized_returns[names(weights)]
    port_return <- sum(weights * aligned_returns, na.rm = TRUE)
    
    portfolio_values[ptype] <- portfolio_values[ptype] * exp(port_return)
  }
  
  portfolio_value_arima <- rbind(portfolio_value_arima, data.frame(
    Month = month,
    Tangency = portfolio_values["Tangency"],
    Minimum_Variance = portfolio_values["Minimum_Variance"],
    Target = portfolio_values["Target"]
  ))
}
```

```{r}

portfolio_value_naive$Method <- "Naive"
portfolio_value_arima$Method <- "ARIMA"

combined <- rbind(
  melt(portfolio_value_naive, id.vars = c("Month", "Method")),
  melt(portfolio_value_arima, id.vars = c("Month", "Method"))
)

combined_wide <- combined |>
  pivot_wider(
    names_from = Method,
    values_from = value
  ) |>
  mutate(Bigger = ifelse(Naive > ARIMA, "Naive", "ARIMA"))

combined_wide
```

## Problem 3

```{r}
# Use your historical data matrix (2015–2023 monthly returns)
params_mvt <- fit_mvt(monthly_ret_matrix)

```

```{r}
compute_portfolio_var_t <- function(weights, mu_vec, cov_matrix, df, alpha = 0.01, investment = 100e6) {
  mu_p <- sum(weights * mu_vec)
  sigma_p <- sqrt(as.numeric(t(weights) %*% cov_matrix %*% weights))
  var_value <- -investment * (mu_p + sigma_p * qt(alpha, df))
  return(var_value)
}
```

```{r}
compute_var_ci_bootstrap <- function(weights, ret_matrix, alpha = 0.01, investment = 100e6, B = 1000) {
  n <- nrow(ret_matrix)
  boot_vars <- numeric(B)
  
  for (b in 1:B) {
    idx <- sample(1:n, n, replace = TRUE)
    boot_sample <- ret_matrix[idx, ]
    params <- fit_mvt(boot_sample)
    mu_p <- sum(weights * params$mu)
    sigma_p <- sqrt(as.numeric(t(weights) %*% params$cov %*% weights))
    boot_vars[b] <- -investment * (mu_p + sigma_p * qt(alpha, params$nu))
  }
  
  ci <- quantile(boot_vars, probs = c(0.025, 0.975))
  return(ci)
}
```

```{r}
results_df <- data.frame()

for (month in rownames(monthly_portfolio_list$Tangency)) {
  mu_month <- unlist(predicted_log_returns_2024[[month]])
  mu_month <- mu_month[colnames(monthly_ret_matrix)]  # Align order with covariance
  
  for (portfolio_name in names(monthly_portfolio_list)) {
    weights <- as.numeric(monthly_portfolio_list[[portfolio_name]][month, ])
    names(weights) <- colnames(monthly_ret_matrix)
    
    VaR <- compute_portfolio_var_t(weights, mu_month, params_mvt$cov, params_mvt$nu)
    CI <- compute_var_ci_bootstrap(weights, monthly_ret_matrix)
    
    results_df <- rbind(results_df, data.frame(
      Month = month,
      Portfolio = portfolio_name,
      VaR = VaR,
      CI_Lower = CI[1],
      CI_Upper = CI[2]
    ))
  }
}
```


## Problem 4

Steps: 1. Compute average interest rate for each semester

```{r}
tbill_sem <- tbill

tbill_sem$Date <- as.Date(tbill_sem$Date)

tbill_sem$Semesters <- cut(tbill_sem$Date, breaks = bond_dates, label = bond_dates[-1], right = TRUE)

tbill_sem$Semesters <- as.Date(tbill_sem$Semesters)

tbill_sem$Semesters[1:118] <- as.Date("2015-06-30")
tbill_sem$Semesters[2495:2501] <- as.Date("2025-06-30")

#Average Semester Log-Returns

tbill_sem_avg <- tbill_sem |>
  group_by(Semesters) |>
  summarise(Mean_Return = mean(Yield))

tbill_sem <- tbill_sem |>
  left_join(tbill_sem_avg, by = "Semesters") 

tbill_sem <- tbill_sem |>
  mutate(Avg_ZCB_Price = 1000 / (1+Mean_Return), 
         Daily_ZCB_Price = 1000 / (1+Yield),
         ZCB_Price_Diff = Avg_ZCB_Price - Daily_ZCB_Price)


# Get unique semesters
# Just 2015/2 (ind 2), 2020/1 (ind 11), and 2024/2 (ind 20) 
unique_semesters <- as.Date(unique(tbill_sem$Semesters))


for (sem in unique_semesters[c(2, 11, 20)]) {
  
  sem <- as.Date(sem) 
  
  # Filter data for the specific semester
  sem_data <- tbill_sem %>% filter(Semesters == sem)
  
  # Extract year and semester number
  sem_year <- year(sem)
  sem_number <- ifelse(month(sem) == 6, 1, 2)  # If June, it's Semester 1; If Dec, it's Semester 2
  
  # Generate line plot
  p <- ggplot(sem_data, aes(x = Date)) +
    geom_line(aes(y = Daily_ZCB_Price, color = "Daily ZCB Price"), size = 1) + 
    geom_line(aes(y = Avg_ZCB_Price, color = "Average ZCB Price"), size = 1, linetype = "dashed") +
    labs(title = paste("Zero-Coupon Bond Price Over Time -", sem_year, "/", sem_number),
         x = "Date",
         y = "Bond Price") +
    scale_color_manual(values = c("Daily ZCB Price" = "blue", "Average ZCB Price" = "red")) +
    theme_minimal()
  
  # Print the plot
  print(p)
}

```

```{r}
tbill_graph_data <- tbill_sem[tbill_sem$Semesters %in% unique_semesters[c(2,11,20)], ]

tbill_graph_data |>
  group_by(Semesters) |>
  summarise(Min = min(Daily_ZCB_Price),
            Max = max(Daily_ZCB_Price),
            Net_Yield_Change = first(Yield) - last(Yield))
```
